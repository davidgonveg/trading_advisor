#!/usr/bin/env python3
"""
‚ö° QUICK TEST SIMPLE - PRUEBA B√ÅSICA SIN DEPENDENCIAS V3.0
========================================================

Version simplificada del quick test que funciona sin dependencias complejas.
Usa solo las funciones b√°sicas para verificar conectividad.
"""

import os
import sys
import time
import json
import requests
from datetime import datetime, timedelta

# Setup b√°sico de paths
def setup_paths():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    if current_dir not in sys.path:
        sys.path.insert(0, current_dir)
    parent_dir = os.path.dirname(current_dir)
    if parent_dir not in sys.path:
        sys.path.insert(0, parent_dir)

setup_paths()

# Importar config b√°sico
try:
    import config as config
    print("‚úÖ Usando configuraci√≥n m√≠nima")
except ImportError:
    print("‚ùå No se pudo cargar configuraci√≥n")
    sys.exit(1)

class SimpleAPITester:
    """Tester simple de APIs sin dependencias complejas"""
    
    def __init__(self):
        self.results = {}
    
    def test_yahoo_api(self):
        """Test directo de Yahoo Finance"""
        print("üîç Testing Yahoo Finance...")
        
        try:
            url = "https://query1.finance.yahoo.com/v8/finance/chart/AAPL"
            params = {
                'interval': '1d',
                'period': '5d'
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if 'chart' in data and data['chart']['result']:
                    result = data['chart']['result'][0]
                    if 'timestamp' in result:
                        points = len(result['timestamp'])
                        print(f"   ‚úÖ Yahoo: {points} puntos de datos")
                        return True
                    
            print(f"   ‚ùå Yahoo: Error en formato de datos")
            return False
            
        except Exception as e:
            print(f"   ‚ùå Yahoo: {str(e)[:50]}")
            return False
    
    def test_alpha_vantage_api(self):
        """Test directo de Alpha Vantage"""
        print("üîç Testing Alpha Vantage...")
        
        try:
            api_keys = getattr(config, 'API_KEYS', {})
            api_key = api_keys.get('ALPHA_VANTAGE')
            
            if not api_key:
                print("   ‚è≠Ô∏è Alpha Vantage: No API key configurada")
                return None
            
            url = "https://www.alphavantage.co/query"
            params = {
                'function': 'TIME_SERIES_DAILY',
                'symbol': 'AAPL',
                'apikey': api_key,
                'outputsize': 'compact'
            }
            
            response = requests.get(url, params=params, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                
                # Verificar si hay error o rate limit
                if 'Error Message' in data:
                    print(f"   ‚ùå Alpha Vantage: {data['Error Message']}")
                    return False
                elif 'Note' in data:
                    print(f"   ‚ö†Ô∏è Alpha Vantage: Rate limited")
                    return False
                elif 'Time Series (Daily)' in data:
                    points = len(data['Time Series (Daily)'])
                    print(f"   ‚úÖ Alpha Vantage: {points} puntos de datos")
                    return True
                else:
                    print(f"   ‚ùå Alpha Vantage: Formato de respuesta inesperado")
                    return False
            else:
                print(f"   ‚ùå Alpha Vantage: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Alpha Vantage: {str(e)}")
            return False
    
    def test_twelve_data_api(self):
        """Test directo de Twelve Data"""
        print("üîç Testing Twelve Data...")
        
        try:
            api_keys = getattr(config, 'API_KEYS', {})
            api_key = api_keys.get('TWELVE_DATA')
            
            if not api_key:
                print("   ‚è≠Ô∏è Twelve Data: No API key configurada")
                return None
            
            url = "https://api.twelvedata.com/time_series"
            params = {
                'symbol': 'AAPL',
                'interval': '1day',
                'apikey': api_key,
                'outputsize': 5
            }
            
            response = requests.get(url, params=params, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                
                if 'status' in data and data['status'] == 'error':
                    print(f"   ‚ùå Twelve Data: {data.get('message', 'Error desconocido')}")
                    return False
                elif 'values' in data and len(data['values']) > 0:
                    points = len(data['values'])
                    print(f"   ‚úÖ Twelve Data: {points} puntos de datos")
                    return True
                else:
                    print(f"   ‚ùå Twelve Data: No hay datos en respuesta")
                    return False
            else:
                print(f"   ‚ùå Twelve Data: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Twelve Data: {str(e)}")
            return False
    
    def test_environment(self):
        """Test del entorno b√°sico"""
        print("üîç Testing entorno...")
        
        # Verificar directorios
        dirs_to_check = ['logs', 'raw_data', 'processed_data', 'temp_data']
        missing_dirs = []
        
        for directory in dirs_to_check:
            full_path = os.path.join('historical_data', directory)
            if not os.path.exists(full_path):
                try:
                    os.makedirs(full_path, exist_ok=True)
                    print(f"   üìÅ Creado: {directory}")
                except:
                    missing_dirs.append(directory)
        
        if missing_dirs:
            print(f"   ‚ùå No se pudieron crear: {missing_dirs}")
            return False
        else:
            print(f"   ‚úÖ Estructura de directorios OK")
            return True
    
    def test_config(self):
        """Test de configuraci√≥n"""
        print("üîç Testing configuraci√≥n...")
        
        # Verificar APIs disponibles
        available_apis = []
        for api in config.API_PRIORITY:
            if config.is_api_available(api):
                available_apis.append(api)
        
        if available_apis:
            print(f"   ‚úÖ APIs configuradas: {', '.join(available_apis)}")
        else:
            print(f"   ‚ùå No hay APIs configuradas")
            return False
        
        # Verificar s√≠mbolos
        if config.SYMBOLS and len(config.SYMBOLS) > 0:
            print(f"   ‚úÖ S√≠mbolos: {len(config.SYMBOLS)} configurados")
        else:
            print(f"   ‚ùå No hay s√≠mbolos configurados")
            return False
        
        return True
    
    def run_all_tests(self):
        """Ejecutar todos los tests"""
        print("‚ö° QUICK TEST SIMPLE - DATOS HIST√ìRICOS V3.0")
        print("=" * 60)
        
        tests = [
            ("üîß Entorno", self.test_environment),
            ("‚öôÔ∏è Configuraci√≥n", self.test_config),
            ("üü° Yahoo Finance", self.test_yahoo_api),
            ("üîµ Alpha Vantage", self.test_alpha_vantage_api),
            ("üü¢ Twelve Data", self.test_twelve_data_api)
        ]
        
        results = []
        start_time = time.time()
        
        for test_name, test_func in tests:
            print(f"\n{test_name}")
            print("-" * 40)
            
            try:
                result = test_func()
                if result is True:
                    results.append((test_name, "‚úÖ PASS"))
                elif result is False:
                    results.append((test_name, "‚ùå FAIL"))
                else:
                    results.append((test_name, "‚è≠Ô∏è SKIP"))
                    
            except Exception as e:
                results.append((test_name, f"üí• ERROR: {str(e)[:30]}"))
        
        # Resumen final
        elapsed = time.time() - start_time
        
        print(f"\n" + "=" * 60)
        print(f"üìã RESUMEN DEL TEST")
        print(f"=" * 60)
        
        for test_name, result in results:
            print(f"   {result} {test_name}")
        
        # Contar resultados
        passed = sum(1 for _, result in results if "‚úÖ" in result)
        failed = sum(1 for _, result in results if "‚ùå" in result)
        total = len([r for _, r in results if "‚è≠Ô∏è" not in r])
        
        print(f"\nüìä ESTAD√çSTICAS:")
        print(f"   Total: {total} tests")
        print(f"   Pasados: {passed}")
        print(f"   Fallidos: {failed}")
        print(f"   Tiempo: {elapsed:.1f}s")
        
        # Evaluaci√≥n general
        if failed == 0 and passed >= 3:
            print(f"\nüéâ SISTEMA LISTO PARA USAR!")
            print(f"üí° Siguiente: python data_downloader.py --test")
        elif passed >= 2:
            print(f"\n‚ö†Ô∏è SISTEMA PARCIALMENTE FUNCIONAL")
            print(f"üí° Al menos tienes conectividad b√°sica")
        else:
            print(f"\n‚ùå SISTEMA NECESITA CONFIGURACI√ìN")
            print(f"üí° Revisa las API keys en el archivo .env")

def main():
    """Funci√≥n principal"""
    tester = SimpleAPITester()
    tester.run_all_tests()

if __name__ == "__main__":
    main()